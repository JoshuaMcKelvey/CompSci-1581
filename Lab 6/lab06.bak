;; <Your name here>
;; Lab Exercise 6
;; CS 1581 Honors Computer Science I
;; <Semester and year here, e.g. Fall 2012>

(module lab06 racket
  
  (provide make-interval
           lower-endpoint
           upper-endpoint
           midpoint
           right-half
           make-3D-vector
           x-coord
           y-coord
           z-coord
           3D-vector-equals
           3D-vector-add
           3D-vector-dot-product
           3D-vector-scale)
  
  ;; *******************************************************************
  ;; Preliminary Exercise for 6.22: A simple ADT for an interval
  
  (define make-interval
    (lambda (lower upper)
      "definition of make-interval goes here"))
  
  (define lower-endpoint
    (lambda (interval)
      "definition of lower-endpoint goes here"))
  
  (define upper-endpoint
    (lambda (interval)
      "definition of upper-endpoint goes here"))
  
  ;; **************************************************************
  ;; Exercise 6.22, p. 161
  
  (define midpoint
    (lambda (interval)
      "definition of midpoint goes here"))
  
  (define right-half
    (lambda (interval)
      "definition of right-half goes here"))
  
  ;; *******************************************************************
  ;; Preliminary Exercise for 6.23: A simple ADT for a three-dimensional
  ;; (3D) vector
  
  (define make-3D-vector   ; 3D vector constructor
    (lambda (x y z)
      "definition of make-3D-vector goes here"))
  
  (define x-coord          ; 3D vector accessors
    (lambda (v)
      "definition of x-coord goes here"))

  (define y-coord
    (lambda (v)
      "definition of y-coord goes here"))

  (define z-coord
    (lambda (v)
      "definition of z-coord goes here"))
  
  (define 3D-vector-equals ; Testing 3D vector equality
    (lambda (v1 v2)
      "definition of 3D-vector-equals goes here"))
  
  ;; **************************************************************
  ;; Exercise 6.23, p. 162
  
  (define 3D-vector-add
    (lambda (v1 v2)
      "definition of 3D-vector-add goes here"))
  
  (define 3D-vector-dot-product
    (lambda (v1 v2)
      "definition of 3D-vector-dot-product goes here"))
  
  (define 3D-vector-scale
    (lambda (v factor)
      "definition of 3D-vector-scale goes here"))
)